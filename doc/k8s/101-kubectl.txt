KUBECTL
  kubectl [cmd] [subcmds] [type] [name] [global_opts] [cmd_opts]
  
  kubectl <ht>
  kubectl <cr>
  kubectl <cmd> <ht>
  kubectl <cmd> <cr>
  kubectl <cmd> --help

  ---------
  kubectl options (-n NS, -v 6..N)
  kubectl version --short

  kubectl config SUBCMD --help
  kubectl proxy [--port 8080] & (connects, authenticates)

  kubectl cluster-info [dump]
  kubectl api-resources [--api-group GROUP] [--namespaced=true|false]
  kubectl api-versions
  kubectl explain RESOURCE.FIELD₁.FIELD₂... [--api-version VERSION]

  ---------
  kubectl get all [-A] [-l QUERY] 
  kubectl get RESOURCE [-A] [-l QUERY]
  kubectl get RESOURCE NAME
  kubectl get RESOURCE(s) -L key₁,... -o json|wide|yaml --show-labels --watch &
  kubectl get -f FILE
  
  kubectl describe all [-A] [-l QUERY] 
  kubectl describe RESOURCE [-A] [-l QUERY]
  kubectl describe RESOURCE NAME
  kubectl describe -f FILE
  
  ---------
  kubectl run NAME --image=IMAGE [--dry-run] [-o yaml]

  kubectl create ns NAME [--dry-run] [-o yaml]
  kubectl create cm NAME [--from-literal k=v] [--dry-run] [-o yaml]
  kubectl create deploy NAME --image=IMAGE [--dry-run] [-o yaml]
  kubectl create svc TYPE NAME --tcp 8080:80 [--dry-run] [-o yaml]
  kubectl create -f FILE|DIR --record --save-config

  kubectl expose RESOURCE NAME --type NodePort --port 8080 --target-port 80 [--dry-run] [-o yaml]
  kubectl expose -f FILE --type NodePort --port 8080 --target-port 80

  kubectl apply -f FILE|DIR --record [--dry-run] [-o yaml]

  ---------
  kubectl rollout status deploy NAME 
  kubectl rollout history deploy NAME --revision N
  kubectl rollout undo deploy NAME --to-revision=N (rollback e.g fra rs₂ → rs₁)
  kubectl rollout restart deploy [NAME]
  kubectl rollout pause|resume deploy NAME 
  
  kubectl scale deploy --replicas 5
  kubectl scale -f FILE --replicas 5

  ---------
  kubectl edit RESOURCE NAME --record

  kubectl label RESOURCE (NAME or -l QUERY or --all) key=value --record
  kubectl label RESOURCE (NAME or -l QUERY or --all) key=value --overwrite --record
  kubectl label RESOURCE (NAME or -l QUERY or --all) key- --record

  kubectl annotate RESOURCE (NAME or -l QUERY or --all) key=value --record
  kubectl annotate RESOURCE (NAME or -l QUERY or --all) key=value --overwrite --record
  kubectl annotate RESOURCE (NAME or -l QUERY or --all) key- --record

  kubectl set sa deploy NAME SA --record
  kubectl set image pod|deploy NAME CONTAINER_NAME=CONTAINER_IMAGE --record
  kubectl set resources deploy NAME --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi --record
  kubectl set env deploy NAME VAR=VALUE
  kubectl set selector service NAME 'env=uat' --record
  kubectl set subject rolebinding NAME --user=USER --group=group

  ---------
  kubectl cp FILE POD:/PATH

  kubectl exec [-it] POD -- CMD
  kubectl exec [-it] POD -- /usr/bin/killall CMD (container restart)

  kubectl logs POD [-c CTR] [-f] [--timestamp]

  kubectl port-forward POD 8181:80 & (nginx)
  kubectl port-forward POD 8181:8080 & (hello-app)

  ---------
  kubectl cordon NODE
  kubectl uncordon NODE
  kubectl drain NODE
  kubectl taint node NODE TAINT

  ---------
  kubectl delete RESOURCE --all [--force]
  kubectl delete RESOURCE -l QUERY [--force]
  kubectl delete RESOURCE NAME [--force]
  kubectl delete -f FILE|DIR

QUERY
  key
  !key
  key=value
  key!=value
  key in (str₁,str₂,...) (or)
  key notin (str₁,str₂,...)
  query₁,query₂,... (and)

