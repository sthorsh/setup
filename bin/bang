#! /bin/bash -

# To run this script, from ~ do:
# wget --user=sthorsh --ask-password https://raw.githubusercontent.com/sthorsh/setup/master/bin/bang
# chmod +x bang
# ~/.bang

# Usernames
DOCKER_USER="svein"

# Version numbers
GRADLE_VERSION=6.4.1
IJ_VERSION=2020.1.3
MAVEN_VERSION=3.5.4
SLACK_VERSION=3.3.3
SQUIRREL_VERSION=3.8.1
TMUX_VERSION=3.1

# Reminder before running this script
echo "check version numbers, remove this line, run again..." && exit 0

# Get package list before patching os
echo "getting package list from github..."
wget --directory-prefix=etc --user=sthorsh --ask-password https://raw.githubusercontent.com/sthorsh/setup/master/etc/dpkg-get-selections.log

# Patch Ubuntu
echo "patching ubuntu and installing packages..."
sudo apt-get update && apt-get -u dist-upgrade
sudo apt-get install -y dselect
sudo dselect update
sudo dpkg --set-selections < ~/etc/dpkg-get-selections.log
sudo apt-get -u dselect-upgrade

# To avoid error on first pull from github
echo "removing package list..."
if [ -f ~/etc/dpkg-get-selections.log ]; then rm ~/etc/dpkg-get-selections.log; fi

# Install Chrome
if command -v google-chrome-stable > /dev/null 2>&1
then
  echo "chrome already installed..."
else
  echo "installing chrome..."
  wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  sudo sh -c 'echo "deb https://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  sudo apt-get update
  sudo apt-get install google-chrome-stable
fi

# Configure Gnome
echo "configuring gnome..."
# capslock to ctrl
gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier']"
# alt-pipe
gsettings set org.gnome.desktop.wm.keybindings switch-group []
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-left "['disabled']"
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-right "['disabled']"
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-up "['disabled']"
gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-down "['disabled']"
gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-left []
gsettings set org.gnome.desktop.wm.keybindings panel-main-menu "[]"
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up []
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down []
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left []
gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right []
gsettings set org.gnome.settings-daemon.plugins.media-keys terminal "[disabled]"
gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ switch-to-tab-8 []
gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings:/ close-tab "[disabled]"

# Create directories
echo "creating directories..."
if [ ! -e ~/bin ]; then mkdir ~/bin; fi
if [ ! -e ~/dev ]; then mkdir ~/dev; fi
if [ ! -e ~/devops ]; then mkdir ~/devops; fi
if [ ! -e ~/doc ]; then mkdir ~/doc; fi
if [ ! -e ~/etc ]; then mkdir ~/etc; fi
if [ ! -e ~/install ]; then mkdir ~/install; fi
if [ ! -e ~/tmp ]; then mkdir ~/tmp; fi

# Remove directories
echo "removing directories and files..."
if [ -d ~/Documents ]; then rm -rf ~/Documents/; fi
if [ -d ~/Music ]; then rm -rf ~/Music/; fi
if [ -d ~/Public ]; then rm -rf ~/Public/; fi
if [ -d ~/Templates ]; then rm -rf ~/Templates/; fi
if [ -d ~/Videos ]; then rm -rf ~/Videos/; fi
if [ -f ~/examples.desktop ]; then rm ~/examples.desktop; fi

# Install bat
if command -v bat > /dev/null 2>&1
then
  echo "bat installed..."
else
  echo "installing bat..."
  wget https://github.com/sharkdp/bat/releases/download/v0.15.4/bat_0.15.4_amd64.deb
  sudo dpkg -i bat_0.15.4_amd64.deb
fi

# Install manly
if command -v manly > /dev/null 2>&1
then
  echo "manly already installed..."
else
  echo "installing manly..."
  pip install --user manly
fi

# Install java
# https://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-instead
if command -v java > /dev/null 2>&1
then
  echo "java installed..."
else
  echo "installing java 8..."
  wget -c --directory-prefix=install --header "Cookie: oraclelicense=accept-securebackup-cookie" \
    http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz
  sudo mkdir /usr/lib/jvm
  sudo tar -xf install/jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm/
  sudo ln -sf /usr/lib/jvm/jdk1.8.0_131/ /usr/lib/jvm/java
fi

# Install javadoc
if [ -f /usr/lib/jvm/java/docs  ]
then
  echo "java installed..."
else
  echo "installing java 8 documentation..."
  wget -c --directory-prefix=install --header "Cookie: oraclelicense=accept-securebackup-cookie" \
    https://download.oracle.com/otn-pub/java/jdk/8u261-b12/a4634525489241b9a9e1aa73d9e118e6/jdk-8u261-docs-all.zip
  unzip install/jdk-8u261-docs-all.zip -d install
  sudo mv install/docs /usr/lib/jvm/java
fi

# Install intellij
if command -v /usr/lib/idea-IC/bin/idea.sh > /dev/null 2>&1
then
  echo "intellij installed..."
else
  echo "installing intellij..."
  wget --directory-prefix=install https://download.jetbrains.com/idea/ideaIC-${IJ_VERSION}-no-jbr.tar.gz
  sudo tar -xf install/ideaIC-${IJ_VERSION}-no-jbr.tar.gz -C /usr/lib
  sudo ln -sf /usr/lib/idea-IC-* /usr/lib/idea-IC
fi

# Install gradle
if command -v gradle > /dev/null 2>&1
then
  echo "gradle installed..."
else
  echo "installing gradle..."
  wget --directory-prefix=install https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip
  sudo unzip -d /opt/gradle install/gradle-*.zip
  sudo ln -sf /opt/gradle/gradle-${GRADLE_VERSION}/ /opt/gradle/gradle
fi

# Install maven
if command -v mvn > /dev/null 2>&1
then
  echo "maven installed..."
else
  echo "installing maven..."
  wget --directory-prefix=install http://apache.uib.no/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz
  sudo tar -xf install/apache-maven-${MAVEN_VERSION}-bin.tar.gz -C /usr/lib
  sudo ln -sf /usr/lib/apache-maven-${MAVEN_VERSION}/ /usr/lib/apache-maven
fi

# Install Postman
if command -v /opt/Postman/Postman > /dev/null 2>&1
then
  echo "postman installed..."
else
  echo "installing postman..."
  wget --directory-prefix=install https://dl.pstmn.io/download/latest/linux?arch=64 -O install/postman.tar.gz
  sudo tar -xf install/postman.tar.gz -C /opt/
fi

# Install slack
if command -v slack > /dev/null 2>&1
then
  echo "slack installed..."
else
  echo "installing slack..."
  wget --directory-prefix=install "https://downloads.slack-edge.com/linux_releases/slack-desktop-${SLACK_VERSION}-amd64.deb"
  sudo apt-get install gdebi-core -y
  sudo gdebi install/slack-desktop-${SLACK_VERSION}-amd64.deb
fi

# Install squirrel
if [ -f /usr/lib/squirrelsql/squirrel-sql.sh ]
then
  echo "squirrel installed..."
else
  echo "installing squirrel..."
  wget --directory-prefix=install https://sourceforge.net/projects/squirrel-sql/files/1-stable/${SQUIRREL_VERSION}-plainzip/squirrelsql-${SQUIRREL_VERSION}-standard.zip
  sudo unzip install/squirrelsql-${SQUIRREL_VERSION}-standard.zip -d /usr/lib > /dev/null
  sudo ln -sf /usr/lib/squirrelsql-${SQUIRREL_VERSION}-standard/ /usr/lib/squirrelsql
  sudo chmod -R +x /usr/lib/squirrelsql
fi

# Install tldr
if command -v tldr > /dev/null 2>&1
then
  echo "tldr installed..."
else
  echo "installing tldr..."
  sudo npm install -g tldr
  tldr --update
fi

# Install tmux
if command -v tmux > /dev/null 2>&1
then
  echo "tmux already installed..."
else
  wget --directory-prefix=install "https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz"
  tar xf install/tmux-${TMUX_VERSION}.tar.gz -C install
  cd install/tmux-${TMUX_VERSION}
  ./configure; make; sudo make install
  sudo rm -rf /usr/local/src/tmux-\*
  sudo mv install/tmux-${TMUX_VERSION} /usr/local/src
fi

# Install docker
if command -v docker > /dev/null 2>&1
then
  echo "docker already installed..."
else
  echo "installing docker..."
  wget -qO- https://get.docker.com/ | sh
  sudo groupadd docker
  sudo usermod -aG docker $DOCKER_USER
fi

# Backup bashrc before first pull from github
if [ ! -f ~/.bashrc-ubuntu ]; then mv ~/.bashrc ~/.bashrc-ubuntu; fi

# Configure git
if git remote -v | grep origin > /dev/null 2>&1;
then
  echo "git already configured..."
else
  echo "configure git..."
  git config --global user.name svein
  git config --global user.email sthorsh@gmail.com
  git config --global color.ui auto
  git config --global core.pager ''
  git init
  git remote add origin https://github.com/sthorsh/setup.git
fi

# First pull from github
echo "first pull from github..."
git pull --rebase origin master

# Configure tmux
if [ -d ~/.tmux/plugins/tpm ]
then
  echo "tmux already configured..."
else
  echo "configure tmux..."
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# Configure vim
if [ -d ~/.vim/bundle/Vundle.vim ]
then
  echo "vim already configured..."
else
  echo "configure vim..."
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  vim +BundleInstall +qall
fi

# Create ssh key
if [ -f ~/.ssh/id_rsa.pub ]
then
  echo "ssh key already exists..."
else
  echo "creating ssh key..."
  ssh-keygen -t rsa -b 4096 -C "."
fi

# Pin to desktop
dconf write /org/gnome/shell/favorite-apps "[
'google-chrome.desktop',
'gnome-control-center.desktop',
'gnome-screenshot.desktop',
'gnome-terminal.desktop',
'nautilus.desktop',
'slack.desktop',
'update-manager.desktop']"

# Change github access from https to passwordless ssh
git remote set-url origin git@github.com:sthorsh/setup.git

# Done
echo "installation done, will reboot..."

# Reboot
sleep 5
sudo reboot

# AFTER INSTALLATION
# Delete startup script
# rm ~/bang

# Set desktop background
# Use ~/Pictures/ubuntu-logo.jpg

# Add ssh key to github account
# Cf https://docs.github.com/en/enterprise/2.15/user/articles/adding-a-new-ssh-key-to-your-github-account#

# Test passwordless github ssh access:
# $ git commit -a -m "."
# $ git push origin master

# TO BE INSTALLED
# jq
# sdkman
# sqldeveloper
