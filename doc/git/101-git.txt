GIT                                                       

git TAB                                           completion

git help                                          -
git help --all|config|guides                      -
git help CMD                                      -              
git help GUIDE                                    -            

git config                                        usage
git config --list                                 list all
git config --show-scope                           global|local|...
git config --show-origin                          filename
git config section.key                            get value
git config section.key value                      set value
 
git init [DIR]                                    init project

git clone URL [DIR]                               clone project

--------------
git blame FILE                                    annotate file
                                         
git branch -avv                                   list local|upstream|remote-tracking branches
git branch b [H|R|C]                              create b
git branch -d b                                   delete b
git branch -m b new_name                          rename b
git branch b -t UPSTREAM                          create b; set upstream e.g origin/b
git branch -u UPSTREAM b                          set upstream e.g origin/b
git branch --unset-upstream b                     unset upstream
  
git checkout H|R|C                                mv HEAD; update wtree<H|R|C
git checkout -b b H|R|C                           create b; checkout H|R|C
git checkout -t UPSTREAM                          create b; set upstream e.g origin/b; checkout H|R|C
git checkout PATH                                 overwrite wtree<index 
git checkout H|R|C PATH                           overwrite wtree<index<H|R|C
                                                          
git cherry-pick R|C ...                           create cherry_commits; mv HEAD; update wtree<HEAD

git commit [FILES] -m MSG                         create commit; mv HEAD
git commit -am MSG                                stage changes; create commit; mv HEAD
git commit --amend -m MSG                         create amend_commit; mv HEAD

git diff [PATHS]                                  wtree vs index
git diff --staged [PATHS]                         index vs HEAD
git diff H|R|C [PATHS]                            wtree vs commit
git diff --staged H|R|C [PATHS]                   index vs commit
git diff H|R|C H|R|C [PATHS]                      commit vs commit
git diff H|R|C...H|R|C [PATHS]                    eq git diff $(git merge-base A B) B

git log -N                                        number
git log --all                                     show all refs/
git log --grep=REGEXP                             grep commit msgs
git log --since=DATE                              e.g yyyy-mm-dd
git log --decorate=full                           show prefix ref names
git log --graph                                   -
git log --oneline                                 -
git log --source                                  show ref by which commit was reached
git log REVISION_RANGE                            cf $ man gitrevisions
git log PATH                                      e.g filename

git merge -m msg R|C ...                          create merge_commit OR do ff merge
git merge -m msg                                  merge in current branch's upstream
git merge --ff --no-ff                            default: ff
git merge --abort|quit|continue                   if conflict
  
git mv PATH NEW_NAME                              stage ie wtree>index

git rebase UPSTREAM                               git switch upstream; create rebase_commits
git rebase -i UPSTREAM                            interactive
git rebase --abort|quit|skip|continue             if conflict

  git reflog [OPTS]                               -
  git reflog [OPTS] HEAD|BRANCH                   -
  git reflog [OPTS] refs/heads/master             -
  
  git reset b1|t1|COMMIT [FILE]                   mv HEAD [and branch]; unstage index<HEAD
  git reset --soft b1|t1|COMMIT                   mv HEAD [and branch]
  git reset --hard b1|t1|COMMIT                   mv HEAD [and branch]; wtree<HEAD
     
  git restore PATH                                restore wtree<index
  git restore --staged PATH                       unstage index<HEAD
  git restore --staged --worktree PATH            unstage-restore wtree<HEAD
    
  git revert COMMIT                               create revert_commit
  
  git rm FILE                                     stage ie wtree>index
  git rm --cached FILE                            unstage ie rm from index
    
  git show [HEAD]                                 show last commit
  git show [--shortstat] OBJECT                   show branch|tag|commit|tree|file
  
  git stage PATH                                  stage untracked|modified|deleted files
  git stage --patch PATH                          stage hunks
    
  git stash list                                  list stash
  git stash show                                  show stash entry
  git stash -m MSG                                stash stash<wtree<index
  git stash apply stash@{N}                       unstash stash>wtree
  git stash pop stash@{N}                         unstash stash>wtree
  git stash drop stash@{N}                        drop entry
  git stash clear                                 clear stash
   
  git status                                      show branch, tracking, staged, modified, untracked
  git status --ignored                            show ignored
  git status --show-stash                         show stash
  
  git switch b1                                   mv HEAD; wtree<HEAD
  git switch -c b2                                create b2; mv HEAD; wtree<HEAD
    
  git tag                                         show tags
  git tag t1                                      create t1
  git tag -a t1 -m "."                            create annotated t1
  git tag -d t1                                   delete t1

-------------
https://stackoverflow.com/questions/44995423/does-upstream-branch-have-be-a-remote-branch
git remote -v                                     show remote w/urls
  git remote add NAME URL                         init; remote-add; fetch; branch -t; checkout
  git remote prune NAME                           prune 
  git remote rm NAME                              remove remote
  git remote update --prune
  
  git pull -v REMOTE +SRCOBJ:DSTREF                 eq git fetch [opts]; git merge [opts]
  git pull -vr REMOTE +SRCOBJ:DSTREF                eq git fetch [opts]; git rebase [opts]
  
  git fetch -v REMOTE +SRCOBJ:DSTREF                download refs and objects from REMOTE
  git fetch -vp REMOTE +SRCOBJ:DSTREF               prune remote tracking refs deleted on REMOTE (noop?)

  git push -v REMOTE +SRCOBJ:DSTREF               update remote refs; send objects
  git push -v -u REMOTE +SRCOBJ:DSTREF            create remote branch
  git push -v -d REMOTE +SRCOBJ:DSTREF            delete remote branch
  
