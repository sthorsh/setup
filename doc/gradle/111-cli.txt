CLI

gradle
  $ gradle <ht>
  $ gradle -<ht>
  $ gradle --<ht>
  $ gradle --help

  $ gradle -i
  $ gradle -q
  $ gradle --console=auto|plain|rich|verbose
  $ gradle --dry-run
  $ gradle --exclude-task=<task>
  $ gradle --scan
  $ gradle --warning-mode=all|fail|none|summary
  ...

  $ gradle [task ...] [opt ...]
  $ gradle [subproject:task ...] [opt ...]

  $ gradle init
  $ gradle wrapper

  $ gradle buildEnvironment       build script classpath: plugin w/transitive dependencies
  $ gradle dependencies 
  $ gradle dependencies | grep " - "
  $ gradle dependencies --configuration=<configuration>
  $ gradle dependencyInsight --dependency 
  $ gradle help --task=<task>
  $ gradle outgoingVariants
  $ gradle projects
  $ gradle properties
  $ gradle properties | grep "plugins:" | tr , "\n" | sed "s/plugins: //"
  $ gradle tasks [--all]
  ...

gradlew
  --- from Task types: Wrapper
    Generates scripts (for *nix and windows) which allow you to build your project with Gradle, without having to
    install Gradle.
    
    When a user executes a wrapper script the first time, the script downloads and installs the appropriate Gradle
    distribution and runs the build against this downloaded distribution. Any installed Gradle distribution is ignored when
    using the wrapper scripts.
    
    The scripts generated by this task are intended to be committed to your version control system. This task also generates
    a small gradle-wrapper.jar bootstrap JAR file and properties file which should also be committed to your VCS. The
    scripts delegates to this JAR.
  --- from Task types: Wrapper (stop)

  When executing the Gradle Wrapper from subprojects, one must reference gradlew
  relatively. For example: ../gradlew taskName. The community gdub project aims to
  make this more convenient.

gw
  https://github.com/dougborg/gdub

gradle.properties
  org.gradle.console=auto
  ...


