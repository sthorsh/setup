DSL
  .[un]marshal().base64()
  .[un]marshal(dataFormatRef)
  .[un]marshal("myDataFormat")
    .to(...)

camel-core
  camel-core        GzipDataFormat        
  camel-core        SerializationDataFormat (pojo/blob)

camel-xxxx
  camel-base64      Base64DataFormat
  camel-bindy       BindyCsvDataFormat
  camel-bindy       BindyFixedLengthDataFormat
  camel-bindy       BindyKeyValuePairDataFormat
  camel-boon        BoonDataFormat (pojo/json)
  camel-crypto      CryptoDataFormat
  camel-csv         CsvDataFormat
  camel-flatpack    FlatpackDataFormat
  camel-jacksonxml  JacksonXMLDataFormat (pojo/xml)
  camel-jaxb        JaxbDataFormat (pojo/xml)
  camel-fastjson    FastjsonDataFormat (pojo/json)
  camel-gson        GsonDataFormat (pojo/json)
  camel-jackson     JacksonDataFormat (pojo/json)
  camel-johnzon     JohnzonDataFormat (pojo/json)
  - lzf               payload ⭤ komprimert payload
  - mime-multipart    msg w/attachments ⭤ mime-multipart msg
  - pgp
  - protobuf          objekt ⭤ binformat
    rss
  - soap              objekt ⭤ soap envelope
  - string            tekst ⭤ enkodet String e.g UTF-8
  - syslog            payload ⭤ rfc3164 message
  - tar file          payload ⭤ komprimert payload
    thrift
  - tidymarkup        html ⭤ velformet html
  - univocity         Map<String,T> ⭤ csv, fixed-width, tsv
  - univocity         Map<String,T> ⭤ csv, fixed-width, tsv
  - univocity         Map<String,T> ⭤ csv, fixed-width, tsv
  - xmlrpc
  - xmlsecurity       klartekst xml ⭤ kryptert xml
  camel-xstream     JsonDataFormat (pojo/json)
  camel-xstream     XStreamDataFormat (pojo/xml)
  - yaml              pojo ⭤ yaml
  - zip               payload ⭤ komprimert payload
  - zipfile           payload ⭤ komprimert payload

SPI
  marshal(Exchange, Object, OutputStream): void
  unmarshal(Exchange, InputStream): Object

