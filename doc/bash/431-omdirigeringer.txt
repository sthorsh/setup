OMDIRIGERING

Operatorer
  <                   input redirect operator 
  >                   output redirect operator

Omdirigeringer
  cmd < f             åpne f for read; pek stdin → f
  cmd << EOL          pek stdin → linjer (heredoc)
  cmd <<< "..."       pek stdin → string (herestr)

  cmd > f             åpne f for write; pek stdout → f
  cmd > /dev/null     åpne bit-bucket for write; pek stdout → bit-bucket
  cmd >| f            åpne f for overwrite; pek stdout → f
  cmd >> f            åpne f for append; pek stdout til f

  cmd 2> f            åpne f for write; pek stderr → f
  cmd >& f            åpne f for write; pek stdout og stderr → f

  exec 3< f           åpne f for read; pek fd3 → f
  read -n 5 var <&3   pek stdin → fd3 (→ f)
  exec 3<&-           pek fd3 → - (dvs lukk fd3)

  exec 3> f           åpne f for write; pek fd3 → f
  echo foo >&3        pek stdout → fd3 (→ f)
  exec 3>&-           pek fd3 → - (dvs lukk fd3)

  exec 3<> f          åpne f for read-write; pek fd3 → f
  ...

KONTEKST 

For hver Unix-prosess inkl bash
  FD 0: standardstrøm for innmating (stdin) (data source)
  FD 1: standardstrøm for utmating (stdout) (data sink)
  FD 2: standardstrøm for feilmeldinger (stderr) (error reports)
  FD 3: strøm for input el output
  ...

Tabeller
  Per-prosess fd-tabell: 0, 1, 2...
  System-wide filtabell: r, u, w... (modus)
  System-wide inodetabell: index number, file name
    
Når Bash starter
  0 → u → /dev/pts/1 (pseudoterminal)
  1 → u → /dev/pts/1 
  2 → u → /dev/pts/1 
  ...

Når Bash kjører kommando
  Bash fork'er barnprosess
  Barnet arver fd's fra bash 
  Bash etablerer evt omdirigeringer
  Bash kjører kommandoen evt m/omdirigeringer

Systemkall
  open, close, read, write, dup, ...

