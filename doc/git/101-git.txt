GIT                                               

git                                                 usage

git help -a                                         cmds
git help -c                                         config
git help -g                                         guides
git help CMD                                        help cmd
git help GUIDE                                      help guide

git config                                          use
git config -l                                       list vars
git config section.key                              get value
git config section.key value                        set value

git init [DIR]                                      init project

git clone REPO [DIR]                                clone project

git remote -v                                       show remote + fetch|push url
git remote add NAME URL                             init; remote-add; fetch; branch -t; checkout
git remote rm NAME                                  remove remote

----------
git status                                          show untracked|modified|staged
git status --ignored                                show ignored
git status --show-stash                             show stash

git diff [PATHS]                                    wtree vs index
git diff PATH₁ PATH₂                                file₁ vs file₂ OR dir₁ vs dir₂
git diff --staged [PATHS]                           index vs HEAD
git diff COMMIT [PATHS]                             wtree vs HEAD|branch|tag|commit
git diff --staged COMMIT [PATHS]                    index vs HEAD|branch|tag|commit 
git diff COMMIT₁ COMMIT₂ [PATHS]                    HEAD|branch|tag|commit vs HEAD|branch|tag|commit
git diff COMMIT₁...COMMIT₂ [PATHS]                  $ git diff $(git merge-base A B) B
git diff commit₁ commit₂ commit₃ ... [PATHS]        merge-commit + ≥2 parent-commits

git log [HEAD] [PATHS]                              -
git log [HEAD] -N [PATHS]                           -
git log [HEAD] --decorate=full [PATHS]              print ref name prefix
git log [HEAD] --source [PATHS]                     print ref name by which commit was reached
git log [HEAD] --all [PATHS]                        commit limiting
git log [HEAD] --grep=REGEXP [PATHS]                commit limiting
git log [HEAD] --not [PATHS]                        commit limiting
git log [HEAD] --since=yyyy--mm-dd [PATHS]          commit limiting
git log [HEAD] --graph [PATHS]                      commit formatting
git log [HEAD] --oneline [PATHS]                    commit formatting
git log [OPTS] COMMITS₁ [PATHS]                     include HEAD|branch|tag|commit
git log [OPTS] COMMITS₁ ^COMMITS₂ [PATHS]           include ^exclude HEAD|branch|tag|commit
git log [OPTS] COMMMIT₁...COMMIT₂                   $ git log A B --not $(git merge-base --all A B)

git reflog [OPTS]                                   -
git reflog [OPTS] HEAD|BRANCH                       -
git reflog [OPTS] refs/heads/master                 -

git blame FILE                                      annotate file

git show [HEAD]                                     show last commit
git show [--shortstat] OBJECT                       show branch|tag|commit|tree|file

----------
git stash list                                      list stash
git stash show                                      show stash entry
git stash -m MSG                                    stash stash<wtree<index
git stash apply stash@{N}                           unstash stash>wtree
git stash pop stash@{N}                             unstash stash>wtree
git stash drop stash@{N}                            drop entry
git stash clear                                     clear stash
 
git add PATH                                        stage untracked|modified|deleted files
git add --patch PATH                                stage hunks
  
git mv SRC DST                                      stage wtree>index
  
git rm FILE                                         stage wtree>index
git rm --cached FILE                                unstage index<HEAD
  
----------
git branch -avv                                     list local|upstream|remote-tracking branches
git branch b1 [REF|COMMIT]                          create b1
git branch b1 -t REMOTE/REPO                        create b1; set upstream
git branch b1 -u REMOTE/REPO                        set upstream
git branch b1 --unset-upstream                      unset upstream
git branch b1 -m b2                                 rename b1
git branch b1 -d                                    delete b1
  
git tag                                             show tags
git tag t1                                          create t1
git tag -a t1 -m "."                                create annotated t1
git tag -d t1                                       delete t1
  
git commit [FILES] -m MSG                           create commit index>HEAD
git commit [FILES] -am MSG                          create commit wtree>HEAD
git commit --amend -m MSG                           create amend_commit (history rewrite)

git revert COMMIT                                   create revert_commit

git checkout b1|t1|COMMIT                           mv HEAD; wtree<HEAD
git checkout -b b2 b1|t1|COMMIT                     create b2; mv HEAD; wtree<HEAD
git checkout -t REMOTE/b1                           create b1; set upstream; mv HEAD; wtree<HEAD
git checkout FILES                                  wtree-files<index 
git checkout -p FILES                               wtree-hunks<index
  
git switch b1                                       mv HEAD; wtree<HEAD
git switch -c b2                                    create b2; mv HEAD; wtree<HEAD
  
git restore PATH                                    restore wtree<index
git restore --staged PATH                           unstage index<HEAD
git restore --staged --worktree PATH                unstage-restore wtree<HEAD
  
git reset b1|t1|COMMIT [FILE]                       mv HEAD [and branch]; unstage index<HEAD
git reset --soft b1|t1|COMMIT                       mv HEAD [and branch]
git reset --hard b1|t1|COMMIT                       mv HEAD [and branch]; wtree<HEAD
   
----------
git merge SOURCE -m MSG                             create merge_commit OR perform ff merge

git cherry-pick b1|COMMITS                          create cherry_commit; mv branch/HEAD; wtree<HEAD

git rebase BRANCH                                   create rebase_commits; mv HEAD/current_branch; wtree<HEAD
git rebase --interactive BRANCH                     create interactive rebase_commits
  
-----------------
  git fetch
  
  git pull --no-rebase
  git pull --ff
  git pull --rebase
  
  git push REPO REF
  git push -u REPO REF                           create remote branch
  git push -d REPO REF                           delete remote branch
