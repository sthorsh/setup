Graf
- Konsument/prosessor
- CamelInternalProcessor
- Error handler
- DelegateSyncProcessor
- Prosessor: kaster exception

DelegateSyncProcessor
- try processor.process(exchange) 
- catch (Throwable e) 
- exchange.setException(e)
- finally callback.done(true)

Feil m/DefaultErrorHandler
- Fanger exception: exchange.getException() != null
- Setter properties: CamelExceptionCaught mfl
- Velger evt exception policy
- Evt fjerner exception, resetter body, oppdaterer headere, redelivery
- Utmattelse: logger failed delivery, rutetrace, stacktrace
- Utmattelse: returnerer til CamelInternalProcessor

Feil m/NoErrorHandler
- Returnerer til CamelInternalProcessor

Feil m/DeadLetterChannel
- Trinn 1-4: som DefaultErrorHandler
- Umattelse: setter target til uri
- Umattelse: setter exception til null
- Umattelse: fjerne headere for redelivery og rollback
- Umattelse: endrer evt exhange.in til original fra current
- Umattelse: merker exhange med CamelErrorHandlerHandled=true
- Umattelse: sender exchange til uri eg activemq:, file:, log:
- Umattelse: returnerer til CamelInternalProcessor
               
----------------------------------------------------------
Skop
- Globalt: errorHandler/onException
- Kontekst: errorHandler/onException
- Rute: errorHandler/onException (onException i rute vinner)

Bestemme exception policy
  - ingen treff: errorhandler 
  - ett eksakt treff: entydig
  - flere eksakte treff: iht skop
  - ett subtypetreff: entydig
  - flere subtypetreff: iht subtypehierarki (gap detection)
  - wrappet exception: 
  
  
  - Starter med innerst wrappete exception
  - Starter med først definerte onException    
  - Matcher hver exception mot hver onException
  - Hvis samme type: direkte treff → ferdig
  - Hvis subtype: beregner gap → fortsetter
  - Resultat: direkte treff, subtypetreff el bom
          
----------------------------------------------------------

  onException()
  - .maximumRedeliveries(n) resende før utmattelse
  - .continued(true) ignorere v/utmattelse
  - .handled(true).bean(...) håndtere v/utmattelse
  - .handled(true).process(...) håndtere v/utmattelse
  - .handled(true).to(uri) rerouting v/utmattelse

  onException()++
  - onWhen(Predicate)
  - onExceptionOccurred(Processor)
  - onRedeliver(Processor)
  - retryWhile(Predicate)
    
  Konsument
  - Bridge: CIA 11.4.8 TODO
  Grenser for feilhåndtering
  - Feil i konsument: bridgeErrorHandler=true
  - Feil innenfor exchange lifecycle: per default

