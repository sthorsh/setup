PIPELINE

GNU readline library
  Leser tegn fra terminalen
  En <newline> markerer EOL (en terminator)
  Output: en sekvens med tegn (en kommandolinje)

GNU history library
  Ekspanderer !
  Skriver til ~/.bash_history
  Output: en sekvens med tegn (en kommandolinje)

Lexer
    Scanner dvs finner leksemer vha metategn
    Klassifiserer → tokens' navn/-type (kontekstavhengig e.g for)
    Evaluerer → tokens' verdi
    Fjerner whitespace
    Fjerner kommentarer
    Hvis 1st token alias: ekspanderer alias
    Hvis 1st token opening keyword: leser cmd
    Hvis \<newline>: line continuation
    Output: en sekvens med tokens (en kommandolinje)
  
  Parser (Bison)
    Parser tokens (AST)
    Kaster evt syntaksfeil
    Bygger en «command structure» (datastruktur)
    Output: command structure (en kommandolinje)
  
  Makroprosessor
    Ekspanderer braces
    Ekspanderer tilde
    Ekspanderer params
    Substituerer kommando (subskall)
    Ekspanderer aritmetiske expr
    Substituerer prosess  (subskall)
    Splitter felt i ord vha IFS (word splitting)
    Ekspanderer filnavn
    Fjerner escape- og sitattegn
    Output: command structure (en kommandolinje)
  
  Kjøresystem
    Utfører omdirigeringer
    Ekspanderer og tilordner variabelverdier
    Antar første ord er navn, resten er args
    Hvis navn uten slash && navn matcher funksjon
    • Kjører funksjon → done
    Hvis navn uten slash && navn matcher builtin
    • Kjører builtin → done
    Gjør path-søk etter kjørbar fil
    Hvis navn med slash || path-søk treff
    • Bash: syskall fork
    • Bash: lager kjøremiljø
    • Bash: syskall wait: exit status 0..255
    • Barn: syskall exec
    • Barn: kjører kommando i separat kjøremiljø
    • Barn: syskall exit → done
    Bash kan kjøre ikke-kjørbare script som $ bash name (REF: BRM 3.8)
    • Søker i . etter script
    • Søker i path etter script
    • Hvis treff: fork
    Ellers, kaster "command not found"
  
  Outputprosessor
    Leser exit status
    Opphever omdirigeringer
    Eksponerer exit status i $?
  
