ASYMMETRISK KRYPTERING

Nøkkelpar
  Hemmelig/privat/secret nøkkel (sk)
  Offentlig/public nøkkel (pk)

Hemmelig nøkkel
  Eier bruker sk til å dekryptere innkommende meldinger
  Eier bruker sk til å signere utgående meldinger
  
Offentlig nøkkel
  "Alle" bruker pk til å kryptere utgående meldinger (symmetrisk nøkkel) til eier
  "Alle" bruker pk til å verifisere innkommende meldinger (signaturen) fra eier

--------
Krypteringsalgoritme
  Kryptering tar privat nøkkel + signatur; gir kryptert signatur
  Dekryptering tar public nøkkel + kryptert signatur; gir hashverdi

Krypteringsalgoritme
  Algoritme G(seed) -> sk₁, pk₁
  Algoritme G(seed) -> sk₂, pk₂
  Algoritme K(pk, klartekst) -> chiffertekst
  Algoritme D(sk, chiffertekst) -> klartekst

Krypter session key
  A starter med et kryptert dokument
  A generer en initialiseringsvektor (IV)
  A generer en symmetrisk nøkkel feks aes256
  A krypterer doumentet med symmetrisk nøkkel
  A prepender pkcs#1 padding til symmetrisk key
  A runs the padded key through B's public key function -> session key
  A sender kryptert dokument, IV og session key til B
  B dekrypterer session key vha sin private key -> padded symmetrisk key
  B dekryptere kryptert dokumentet vha symmetrisk key

--------
Signatur
  Dokument/melding
  Digital signatur som vedlegg

Signatur
  Verifiserer forfatter, dato og tid for signering (autentisitet)
  Autentiserer inholdet på signeringstidspunktet (integritet)
  Må kunne verifiseres av en tredjepart (til forskjell fra en MAC)

Signering/verifisering
  d: dokument før aes-kryptering
  s: signatur før aes-kryptering
  D: dokument etter aes-dekryptering
  S: signatur etter aes-dekryptering
  ...
  sha256(d) -> dgst1
  pad(dgst1) -> padded_digest x1
  f(x) = x^d mod n -> s
  Eier distribuerer dokument D + signatur S
  sha256(D) -> dgst2
  pad(dgst2) -> padded_digest x2
  f(x) = S^e mod n -> result
  Hvis x2 == result ? verifisering ok : verifisering err
  
